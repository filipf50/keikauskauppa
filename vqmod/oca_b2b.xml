<modification>
<id>B2B Extension for Opencart </id>
	<version>1.5.x</version>
	<vqmver>1.0.0</vqmver>
	<author>Felipe Alvarez</author>
<!--Hacemos que oblige a logearse para poder ver cualquier información 
===========================================================================-->
	<file name="/catalog/controller/common/home.php">
		<operation>
			<search position="after" offset="1"><![CDATA[$this->response->setOutput($this->render());]]></search>
			<add><![CDATA[
			public function login() {
				$route = '';
				
				if (isset($this->request->get['route'])) {
					$part = explode('/', $this->request->get['route']);
					
					if (isset($part[0])) {
						$route .= $part[0];
					}
					
					if (isset($part[1])) {
						$route .= '/' . $part[1];
					}
				}
				
				$ignore = array(
					'account/login',
					'account/forgotten',
					'account/register',
					'module/language',
					'b2b/interfacevgg',
					'b2b/sincronizarenviosvgg'
				);	
							
				if (!$this->customer->isLogged() && !in_array($route, $ignore)) {
					$this->session->data['redirect'] = $this->url->link('common/home', '', 'SSL');
	  
			  		$this->redirect($this->url->link('account/login', '', 'SSL'));
				}
			}]]></add>
		</operation>
	</file>
<!--===========================================================================-->	


<!--Añadimos las opciones de Seguimiento y Recogida en la barra de memnus superior
===========================================================================-->
	<file name="catalog/controller/common/header.php">
        <operation>
            <search position="after"><![CDATA[$this->data['checkout'] = $this->url->link('checkout/checkout', '', 'SSL');]]></search>
            <add><![CDATA[
				$this->data['tracking'] = $this->url->link('account/order', '', 'SSL');
				$this->data['trackingvgg'] = $this->url->link('b2b/trackingvgg', '', 'SSL');
				$this->data['collections'] = $this->url->link('b2b/newcollection', '', 'SSL');
				$this->data['newcollection'] = $this->url->link('b2b/newcollection/getForm', '', 'SSL');

			]]></add>
        </operation>
		<operation>
            <search position="after"><![CDATA[$this->data['text_checkout'] = $this->language->get('text_checkout');]]></search>
            <add><![CDATA[
				$this->data['text_tracking'] = $this->language->get('text_tracking');
				$this->data['text_trackingvgg'] = $this->language->get('text_trackingvgg');
				$this->data['text_collections'] = $this->language->get('text_collections');
				$this->data['text_newcollection'] = $this->language->get('text_newcollection');

			]]></add>
        </operation>
		
	</file>
	<file name="catalog/language/spanish/common/header.php">
        <operation>
            <search position="replace"><![CDATA[$_['text_checkout'] = 'Pagar';]]></search>
            <add><![CDATA[
				$_['text_checkout']       = 'Finalizar Pedido';
				$_['text_tracking'] = 'Histórico Pedidos';
				$_['text_trackingvgg'] = 'Seguimiento Envíos';
				$_['text_collections'] = 'Recogidas';
				$_['text_newcollection'] = 'Nueva Recogida';
			]]></add>
        </operation>
	</file>	
	<file name="catalog/language/english/common/header.php">
        <operation>
            <search position="replace"><![CDATA[$_['text_checkout']       = 'Checkout';]]></search>
            <add><![CDATA[
				$_['text_checkout']       = 'Close order';
				$_['text_tracking'] = 'Orders Historic';
				$_['text_trackingvgg'] = 'Shipments Track &amp; tracing';
				$_['text_newcollection'] = 'Collections';
				$_['text_newcollection'] = 'New Collection';
			]]></add>
        </operation>
	</file>
	<file name="catalog/view/theme/*/template/common/header.tpl">
        <operation>
            <search position="replace" offset="21"><![CDATA[<div id="menu">]]></search>
            <add><![CDATA[
				<div id="menu">
					  <ul>
						<?php foreach ($categories as $category) { ?>
						<li><a href="<?php echo $category['href']; ?>"><?php echo $category['name']; ?></a>
						  <?php if ($category['children']) { ?>
						  <div>
							<?php for ($i = 0; $i < count($category['children']);) { ?>
							<ul>
							  <?php $j = $i + ceil(count($category['children']) / $category['column']); ?>
							  <?php for (; $i < $j; $i++) { ?>
							  <?php if (isset($category['children'][$i])) { ?>
							  <li><a href="<?php echo $category['children'][$i]['href']; ?>"><?php echo $category['children'][$i]['name']; ?></a></li>
							  <?php } ?>
							  <?php } ?>
							</ul>
							<?php } ?>
						  </div>
						  <?php } ?>
						</li>
						<?php } ?>
						<li><a href="<?php echo $tracking;?>"><?php echo $text_tracking; ?></a></li>
						<li><a href="<?php echo $trackingvgg;?>"><?php echo $text_trackingvgg; ?></a></li>
						<li><a href="<?php echo $collections;?>"><?php echo $text_collections; ?></a></li>
						<li><a href="<?php echo $newcollection;?>"><?php echo $text_newcollection; ?></a></li>
					  </ul>
					</div>
			]]></add>
        </operation>
		<operation>
			<search position="replace"><![CDATA[<?php echo $currency; ?>]]></search>
			<add><![CDATA[]]></add>				
		</operation>
		<operation>
			<search position="replace" offset="7"><![CDATA[<div id="search">]]></search>
			<add><![CDATA[]]></add>
		</operation>
	</file>
<!--===========================================================================-->	


<!--Añadimos campos de stock en los listados y quitamos el de precio
===========================================================================-->
	<file name="catalog/language/spanish/product/category.php">
        <operation>
            <search position="before"><![CDATA[$_['text_price']        = 'Precio:';]]></search>
            <add><![CDATA[
				$_['text_stock']        = 'Stock:';
				// Column
				$_['column_sku']             = 'EAN';
				$_['column_name']            = 'Nombre producto';
				$_['column_model']           = 'Modelo';
				$_['column_image']           = 'Imagen';
				$_['column_stock'] 	         = 'Stock';
				$_['column_quantity']        = 'Cantidad';
				$_['column_options']         = 'Opciones';
				$_['button_filter']           = 'Filtrar';
				$_['text_stock_asc']    = 'Stock (Menor &gt; Mayor)';
				$_['text_stock_desc']   = 'Stock (Mayor &gt; Menor)';
				$_['text_title_excel']   = 'Exportar a Excel';
				$_['text_title_textfile']   = 'Generar fichero de Stock';
				$_['text_season']		='Temporada';
			]]></add>
        </operation>
	</file>

	<file name="catalog/language/english/product/category.php">
        <operation>
            <search position="before"><![CDATA[$_['text_price']        = 'Price:';]]></search>
            <add><![CDATA[
				$_['text_stock']        = 'Stock:';
				// Column
				$_['column_sku']             = 'EAN';
				$_['column_name']            = 'Product Name';
				$_['column_model']           = 'Model';
				$_['column_image']           = 'Image';
				$_['column_quantity']        = 'Stock';
				$_['column_stock'] 	         = 'Stock';
				$_['column_quantity']        = 'Quantity';
				$_['column_options']         = 'Options';
				$_['button_filter']           = 'Filter';
				$_['text_stock_asc']    = 'Stock (Low &gt; High)';
				$_['text_stock_desc']   = 'Stock (High &gt; Low)';
				$_['text_title_excel']   = 'Export to Excel';
				$_['text_title_textfile']   = 'Generate Stock file';
				$_['text_season']		='Season';
			]]></add>
        </operation>
	</file>

	
	<file name="/catalog/controller/product/category.php">
		<operation>
			<search position="after" index="2"><![CDATA[$url = '';]]></search>
			<add><![CDATA[
				if (isset($this->request->get['filter_product_sku'])) {
					$url .= '&filter_product_sku=' . $this->request->get['filter_product_sku'];
				} 
				
				if (isset($this->request->get['filter_product_name'])) {
					$url .= '&filter_product_name=' . $this->request->get['filter_product_name'];
				}
		
				if (isset($this->request->get['filter_model'])) {
					$url .= '&filter_model=' . $this->request->get['filter_model'];
				}
				
				if (isset($this->request->get['filter_location'])) {
					$url .= '&filter_location=' . $this->request->get['filter_location'];
				} 
				if (isset($this->request->get['filter_season'])) {
					$url .= '&filter_season=' . $this->request->get['filter_season'];
				} 
				if (isset($this->request->get['filter_location'])) {
					$url .= '&filter_location=' . $this->request->get['filter_location'];
				} 
			]]></add>
		</operation>
		<operation>
			<search position="after" index="3,4"><![CDATA[$url = '';]]></search>
			<add><![CDATA[
				if (isset($this->request->get['filter_product_sku'])) {
					$url .= '&filter_product_sku=' . $this->request->get['filter_product_sku'];
				} 
				
				if (isset($this->request->get['filter_product_name'])) {
					$url .= '&filter_product_name=' . $this->request->get['filter_product_name'];
				}
		
				if (isset($this->request->get['filter_model'])) {
					$url .= '&filter_model=' . $this->request->get['filter_model'];
				} 
				if (isset($this->request->get['filter_season'])) {
					$url .= '&filter_season=' . $this->request->get['filter_season'];
				} 
				if (isset($this->request->get['filter_location'])) {
					$url .= '&filter_location=' . $this->request->get['filter_location'];
				} 
			]]></add>
		</operation>
		<operation>
			<search position="after" offset="2"><![CDATA['href'  => $this->url->link('product/category', 'path=' . $this->request->get['path'] . $url . '&limit=100')]]></search>
			<add><![CDATA[
				$this->data['limits'][] = array(
				'text'  => 'Ver Todos',
				'value' => 99999,
				'href'  => $this->url->link('product/category', 'path=' . $this->request->get['path'] . $url . 
				           '&limit=99999')	);

				$seasons = $this->model_catalog_product->getProductsSeasons();
				
				$this->data['seasons'] = array();
				$this->data['seasons'][]=array(
								'value' =>"",
								'text'=>'Ver Todo'); 
				if (count($seasons)>1){
					foreach ($seasons as $season) {
						if (strlen($season['upc'])>0){
							$this->data['seasons'][]=array(
								'value' =>$season['upc'],
								'text'  =>$season['upc']); 
							}
					}
				}
			]]></add>
		</operation>
		<operation>
			<search position="before"><![CDATA[if (isset($this->request->get['limit'])) {]]></search>
			<add><![CDATA[
				if (isset($this->request->get['filter_season'])) {
					$this->data['filter_season']=$this->request->get['filter_season'];
				}else{
					$this->data['filter_season']='';
				}
			]]></add>
		</operation>
		<operation>
			<search position="after"><![CDATA[$this->data['text_model'] = $this->language->get('text_model');]]></search>
			<add><![CDATA[
				$this->data['text_stock'] = $this->language->get('text_stock');
				
				$this->data['column_image'] = $this->language->get('column_image');		
				$this->data['column_sku'] = $this->language->get('column_sku');		
				$this->data['column_name'] = $this->language->get('column_name');		
				$this->data['column_model'] = $this->language->get('column_model');		
				$this->data['column_stock'] = $this->language->get('column_stock');		
				$this->data['column_quantity'] = $this->language->get('column_quantity');		
				$this->data['column_options'] = $this->language->get('column_options');		
				$this->data['button_filter'] = $this->language->get('button_filter');
				$this->data['text_title_excel'] = $this->language->get('text_title_excel');	
				$this->data['excel_ico']=DIR_IMAGE . 'data/doc_excel_table.png';
				$this->data['text_title_textfile'] = $this->language->get('text_title_textfile');
				$this->data['textfile_ico']=DIR_IMAGE . 'data/downloadFile.gif';
				$this->data['text_season']=$this->language->get('text_season');
			]]></add>
		</operation>	
		<operation>
			<search position="before"><![CDATA[$this->data['products'][] = array(]]></search>
			<add><![CDATA[
				$options = array();
			
				foreach ($this->model_catalog_product->getProductOptions($result['product_id']) as $option) { 
					if ($option['type'] == 'select' || $option['type'] == 'radio' || $option['type'] == 'checkbox' || $option['type'] == 'image') { 
						$option_value_data = array();
						
						foreach ($option['option_value'] as $option_value) {
							if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
								if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
									$price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax')));
								} else {
									$price = false;
								}
								
								$option_value_data[] = array(
									'product_option_value_id' => $option_value['product_option_value_id'],
									'option_value_id'         => $option_value['option_value_id'],
									'name'                    => $option_value['name'],
									'quantity'				  => $option_value['quantity'],
									'image'                   => $this->model_tool_image->resize($option_value['image'], 50, 50),
									'price'                   => $price,
									'price_prefix'            => $option_value['price_prefix']
								);
							}
						}
						
						$options[] = array(
							'product_option_id' => $option['product_option_id'],
							'option_id'         => $option['option_id'],
							'name'              => $option['name'],
							'type'              => $option['type'],
							'option_value'      => $option_value_data,
							'required'          => $option['required']
						);					
					} elseif ($option['type'] == 'text' || $option['type'] == 'textarea' || $option['type'] == 'file' || $option['type'] == 'date' || $option['type'] == 'datetime' || $option['type'] == 'time') {
						$options[] = array(
							'product_option_id' => $option['product_option_id'],
							'option_id'         => $option['option_id'],
							'name'              => $option['name'],
							'type'              => $option['type'],
							'option_value'      => $option['option_value'],
							'required'          => $option['required']
						);						
					}
				}
				
				if ($result['quantity'] <= 0) {
					$stock = $result['stock_status'];
				} elseif ($this->config->get('config_stock_display')) {
					$stock = $result['quantity'];
				} else {
					$stock = $this->language->get('text_instock');
				}
			]]></add>
		</operation>
		<operation>
			<search position="after"><![CDATA[if (isset($this->request->get['path'])) {]]></search>
			<add><![CDATA[
				$this->data['path']=$this->request->get['path'];
				if (!empty($this->request->post['quantity'])) {
					foreach ($this->request->post['quantity'] as $key => $value) {
						if ($value>0){
							$options=array();
							if (!strpos($key,'-')>0){
								$this->cart->add($key,$value,$options);
							} else {
								if (isset($this->request->post['option'])){
									foreach($this->request->post['option'] as $keyOpt=>$valueOpt){
										if ($keyOpt==$key){
											$auxKey=explode('-',$keyOpt);
											$options[$auxKey[1]]=$valueOpt;
											$this->cart->add($auxKey[0], $value,$options);
										}
									}
								}
							}							
						}
					}
					
					unset($this->session->data['shipping_method']);
					unset($this->session->data['shipping_methods']);
					unset($this->session->data['payment_method']);
					unset($this->session->data['payment_methods']); 
					unset($this->session->data['reward']);
					
					//$this->redirect($this->url->link('product/category&path=' . $this->data['path']));  
					$this->redirect($this->url->link('checkout/cart'));  
					
				}
				
				$this->data['action'] = $this->url->link('product/category&path=' . $this->data['path']); 
			]]></add>
		</operation>	
		<operation>
			<search position="after"><![CDATA['rating'      => $result['rating'],]]></search>
			<add><![CDATA['stock'	=> $stock,
						  'model'	=> $result['model'],
						  'options'	=> $options,
						  'sku'		=> $result['sku'],
 						  'popup'		  =>  $this->model_tool_image->resize($result['image'], $this->config->get('config_image_popup_width'), $this->config->get('config_image_popup_height')),
]]></add>
		</operation>
		<operation>
			<search position="after"><![CDATA['filter_category_id' => $category_id,]]></search>
			<add><![CDATA[
				'filter_sku'	  => $filter_sku,
				'filter_name'	  => $filter_name,
				'filter_model'	  => $filter_model,
				'filter_location'	  => $filter_location,
				'filter_season'	  => $filter_season,
			]]></add>
		</operation>
		<operation>
			<search position="before"><![CDATA[$this->data['breadcrumbs'] = array();]]></search>
			<add><![CDATA[
				if (isset($this->request->get['filter_product_sku'])) {
					$filter_sku = $this->request->get['filter_product_sku'];
				} else {
					$filter_sku = null;
				}
				
				if (isset($this->request->get['filter_product_name'])) {
					$filter_name = $this->request->get['filter_product_name'];
				} else {
					$filter_name = null;
				}
		
				if (isset($this->request->get['filter_model'])) {
					$filter_model = $this->request->get['filter_model'];
				} else {
					$filter_model = null;
				}
				
				if (isset($this->request->get['filter_location'])) {
					$filter_location = $this->request->get['filter_location'];
				} else {
					$filter_location = null;
				}
				
				if (isset($this->request->get['filter_season'])) {
					$filter_season = $this->request->get['filter_season'];
				} else {
					$filter_season = null;
				}
				$this->data['filter_product_sku']=$filter_sku;
				$this->data['filter_product_name'] = $filter_name;
				$this->data['filter_model'] = $filter_model;
				$this->data['filter_location'] = $filter_location;
				$this->data['filter_season']=$filter_season;
			]]></add>
		</operation>
		<operation>
			<search position="after" offset="4"><![CDATA['text'  => $this->language->get('text_model_desc'),]]></search>
			<add><![CDATA[
				$this->data['sorts'][] = array(
				'text'  => $this->language->get('text_stock_asc'),
				'value' => 'p.quantity-ASC',
				'href'  => $this->url->link('product/category', 'path=' . $this->request->get['path'] . '&sort=p.quantity&order=ASC' . $url)
			);
				$this->data['sorts'][] = array(
				'text'  => $this->language->get('text_stock_desc'),
				'value' => 'p.quantity-DESC',
				'href'  => $this->url->link('product/category', 'path=' . $this->request->get['path'] . '&sort=p.quantity&order=DESC' . $url)
			);
			]]></add>
		</operation>
		<operation>
			<search position="after" offset="2" index="2"><![CDATA[$this->response->setOutput($this->render());]]></search>
			<add><![CDATA[
				public function export(){
					$this->load->model('catalog/category');
					
					$this->load->model('catalog/product');
					
					$this->load->model('tool/image'); 
					
					if (isset($this->request->get['path'])) {
						$path = '';
						$parts = explode('_', (string)$this->request->get['path']);
					
						foreach ($parts as $path_id) {
							if (!$path) {
								$path = $path_id;
							} else {
								$path .= '_' . $path_id;
							}
												
							$category_info = $this->model_catalog_category->getCategory($path_id);
							
							if ($category_info) {
								$this->data['breadcrumbs'][] = array(
									'text'      => $category_info['name'],
									'href'      => $this->url->link('product/category', 'path=' . $path),
									'separator' => $this->language->get('text_separator')
								);
							}
						}		
					
						$category_id = array_pop($parts);
					} else {
						$category_id = 0;
					}
					
					if (isset($this->request->get['type'])) {
						$type=$this->request->get['type'];
					} else {
						$type='excell';
					}
					
					if (isset($this->request->get['sort'])) {
						$sort = $this->request->get['sort'];
					} else {
						$sort = 'p.sort_order';
					}
			
					if (isset($this->request->get['order'])) {
						$order = $this->request->get['order'];
					} else {
						$order = 'ASC';
					}
					
					if (isset($this->request->get['page'])) {
						$page = $this->request->get['page'];
					} else { 
						$page = 1;
					}	
										
					if (isset($this->request->get['limit'])) {
						$limit = $this->request->get['limit'];
					} else {
						$limit = $this->config->get('config_catalog_limit');
					}
					if (isset($this->request->get['filter_product_sku'])) {
						$filter_sku = $this->request->get['filter_product_sku'];
					} else {
						$filter_sku = null;
					}
					
					if (isset($this->request->get['filter_product_name'])) {
						$filter_name = $this->request->get['filter_product_name'];
					} else {
						$filter_name = null;
					}
			
					if (isset($this->request->get['filter_model'])) {
						$filter_model = $this->request->get['filter_model'];
					} else {
						$filter_model = null;
					}
					
					if (isset($this->request->get['filter_location'])) {
						$filter_location = $this->request->get['filter_location'];
					} else {
						$filter_location = null;
					}
					
					if (isset($this->request->get['filter_season'])) {
						$filter_season = $this->request->get['filter_season'];
					} else {
						$filter_season = null;
					}
					
					$this->data['products'] = array();
			
					$data = array(
						'filter_category_id' => $category_id, 
		
						'filter_sku'	  => $filter_sku,
						'filter_name'	  => $filter_name,
						'filter_model'	  => $filter_model,
						'filter_location' => $filter_location,
						'filter_season' => $filter_season,
					
						'sort'               => $sort,
						'order'              => $order,
						'start'              => ($page - 1) * $limit,
						'limit'              => $limit
					);
					
					$product_total = $this->model_catalog_product->getTotalProducts($data); 
					
					$results = $this->model_catalog_product->getProducts($data);
					
					foreach ($results as $result) {
							if ($result['image']) {
								$image = $this->model_tool_image->resize($result['image'], $this->config->get('config_image_product_width'), $this->config->get('config_image_product_height'));
							} else {
								$image = false;
							}
							
							if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
								$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')));
							} else {
								$price = false;
							}
							
							if ((float)$result['special']) {
								$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')));
							} else {
								$special = false;
							}	
							
							if ($this->config->get('config_tax')) {
								$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price']);
							} else {
								$tax = false;
							}				
							
							if ($this->config->get('config_review_status')) {
								$rating = (int)$result['rating'];
							} else {
								$rating = false;
							}
											
			
							$options = array();
						
							foreach ($this->model_catalog_product->getProductOptions($result['product_id']) as $option) { 
								if ($option['type'] == 'select' || $option['type'] == 'radio' || $option['type'] == 'checkbox' || $option['type'] == 'image') { 
									$option_value_data = array();
									
									foreach ($option['option_value'] as $option_value) {
										if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
											if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
												$price = $this->currency->format($this->tax->calculate($option_value['price'], $result['tax_class_id'], $this->config->get('config_tax')));
											} else {
												$price = false;
											}
											
											$option_value_data[] = array(
												'product_option_value_id' => $option_value['product_option_value_id'],
												'option_value_id'         => $option_value['option_value_id'],
												'name'                    => $option_value['name'],
												'quantity'				  => $option_value['quantity'],
												'image'                   => $this->model_tool_image->resize($option_value['image'], 50, 50),
												'price'                   => $price,
												'price_prefix'            => $option_value['price_prefix'],
												'ean'					  => $option_value['ean']
											);
										}
									}
									
									$options[] = array(
										'product_option_id' => $option['product_option_id'],
										'option_id'         => $option['option_id'],
										'name'              => $option['name'],
										'type'              => $option['type'],
										'option_value'      => $option_value_data,
										'required'          => $option['required']
									);					
								} elseif ($option['type'] == 'text' || $option['type'] == 'textarea' || $option['type'] == 'file' || $option['type'] == 'date' || $option['type'] == 'datetime' || $option['type'] == 'time') {
									$options[] = array(
										'product_option_id' => $option['product_option_id'],
										'option_id'         => $option['option_id'],
										'name'              => $option['name'],
										'type'              => $option['type'],
										'option_value'      => $option['option_value'],
										'required'          => $option['required']
									);						
								}
							}
							
							if ($result['quantity'] <= 0) {
								$stock = $result['stock_status'];
							} elseif ($this->config->get('config_stock_display')) {
								$stock = $result['quantity'];
							} else {
								$stock = $this->language->get('text_instock');
							}
						
							$this->data['products'][] = array(
								'product_id'  => $result['product_id'],
								'thumb'       => $image,
								'name'        => $result['name'],
								'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, 100) . '..',
								'price'       => $price,
								'special'     => $special,
								'tax'         => $tax,
								'rating'      => $result['rating'],
			'stock'	=> $stock,
									  'model'	=> $result['model'],
									  'options'	=> $options,
									  'sku'		=> $result['sku'],
								'reviews'     => sprintf($this->language->get('text_reviews'), (int)$result['reviews']),
								'href'        => $this->url->link('product/product', 'path=' . $this->request->get['path'] . '&product_id=' . $result['product_id'])
							);
					}
					
					$this->data['category_id']=$category_id;
					
					if($type=='excell'){
						if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/b2b/excel.tpl')) {
							$this->template = $this->config->get('config_template') . '/template/b2b/excel.tpl';
						} else {
							$this->template = 'default/template/b2b/excel.tpl';
						}
					} else {
						if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/b2b/textfile.tpl')) {
							$this->template = $this->config->get('config_template') . '/template/b2b/textfile.tpl';
						} else {
							$this->template = 'default/template/b2b/textfile.tpl';
						}

					}
						
					$this->children = array(
						'common/column_left',
						'common/column_right',
						'common/content_top',
						'common/content_bottom',
						'common/footer',
						'common/header'
					);
						
					$this->response->setOutput($this->render());
				}
			]]></add>
		</operation>
		<operation>
			<search position="after"><![CDATA[$product_total = $this->model_catalog_product->getTotalProducts($data);]]></search>
			<add><![CDATA[
				$this->data['category_id']=$category_id;
				$this->data['product_total']=$product_total;
				$this->data['stock_total']=$this->model_catalog_product->getStockProducts($data); 
			]]></add>
		</operation>
	</file>
	<file name="catalog/model/catalog/product.php">
		<operation>
			<search position="before"><![CDATA[if (!empty($data['filter_manufacturer_id'])) {]]></search>
			<add><![CDATA[
				if (!empty($data['filter_model'])) {
					$sql .= " AND LCASE(p.model) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_model'])) . "%'";
				}
				if (!empty($data['filter_location'])) {
						$sql .= " AND LCASE(p.location) = '" . $this->db->escape(utf8_strtolower($data['filter_location'])) . "'";
				}
				
				if (!empty($data['filter_season'])) {
						$sql .= " AND LCASE(p.upc) = '" . $this->db->escape(utf8_strtolower($data['filter_season'])) . "'";
				}
				
				if (!empty($data['filter_sku'])) {
					$sql .= " AND LCASE(p.sku) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_sku'])) . "%'";
				}
			]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA[$product_option_value_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN " . DB_PREFIX . "option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_id = '" . (int)$product_id . "' AND pov.product_option_id = '" . (int)$product_option['product_option_id'] . "' AND ovd.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY ov.sort_order");]]></search>
			<add><![CDATA[
				$product_option_value_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "product_option_value pov LEFT JOIN " . DB_PREFIX . "option_value ov ON (pov.option_value_id = ov.option_value_id) LEFT JOIN " . DB_PREFIX . "option_value_description ovd ON (ov.option_value_id = ovd.option_value_id) WHERE pov.product_id = '" . (int)$product_id . "' AND pov.product_option_id = '" . (int)$product_option['product_option_id'] . "' AND ovd.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY ov.sort_order, ovd.name");
			]]></add>
		</operation>
		<operation>
			<search position="replace" ><![CDATA[$sql .= " WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'"; ]]></search>
			<add><![CDATA[$sql .= " WHERE p.quantity>0 and pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'"; ]]></add>
		</operation>
		<operation>
			<search position="before"><![CDATA[public function getTotalProductSpecials() {]]></search>
			<add><![CDATA[
				public function getStockProducts ($data = array()) {
					$sql = "SELECT SUM(p.quantity) AS stock FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id)";

					if (!empty($data['filter_category_id'])) {
						$sql .= " LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (p.product_id = p2c.product_id)";			
					}
					
					if (!empty($data['filter_tag'])) {
						$sql .= " LEFT JOIN " . DB_PREFIX . "product_tag pt ON (p.product_id = pt.product_id)";			
					}
					
					$sql .= " WHERE p.quantity>0 and pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'";
					
					if (!empty($data['filter_model'])) {
					$sql .= " AND LCASE(p.model) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_model'])) . "%'";
					}
					
					if (!empty($data['filter_location'])) {
						$sql .= " AND LCASE(p.location) = '" . $this->db->escape(utf8_strtolower($data['filter_location'])) . "'";
					}
					
					if (!empty($data['filter_season'])) {
						$sql .= " AND LCASE(p.upc) = '" . $this->db->escape(utf8_strtolower($data['filter_season'])) . "'";
					}
					
					if (!empty($data['filter_sku'])) {
						$sql .= " AND LCASE(p.sku) LIKE '%" . $this->db->escape(utf8_strtolower($data['filter_sku'])) . "%'";
					}
					
					if (!empty($data['filter_name']) || !empty($data['filter_tag'])) {
						$sql .= " AND (";
											
						if (!empty($data['filter_name'])) {
							$implode = array();
							
							$words = explode(' ', trim(preg_replace('/\s\s+/', ' ', $data['filter_name'])));
							
							foreach ($words as $word) {
								if (!empty($data['filter_description'])) {
									$implode[] = "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%' OR LCASE(pd.description) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%'";
								} else {
									$implode[] = "LCASE(pd.name) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%'";
								}				
							}
							
							if ($implode) {
								$sql .= " " . implode(" OR ", $implode) . "";
							}
						}
						
						if (!empty($data['filter_name']) && !empty($data['filter_tag'])) {
							$sql .= " OR ";
						}
						
						if (!empty($data['filter_tag'])) {
							$implode = array();
							
							$words = explode(' ', trim(preg_replace('/\s\s+/', ' ', $data['filter_tag'])));
							
							foreach ($words as $word) {
								$implode[] = "LCASE(pt.tag) LIKE '%" . $this->db->escape(utf8_strtolower($word)) . "%'";
							}
							
							if ($implode) {
								$sql .= " " . implode(" OR ", $implode) . " AND pt.language_id = '" . (int)$this->config->get('config_language_id') . "'";
							}
						}
					
						$sql .= ")";
					}
					
					if (!empty($data['filter_category_id'])) {
						if (!empty($data['filter_sub_category'])) {
							$implode_data = array();
							
							$implode_data[] = "p2c.category_id = '" . (int)$data['filter_category_id'] . "'";
							
							$this->load->model('catalog/category');
							
							$categories = $this->model_catalog_category->getCategoriesByParentId($data['filter_category_id']);
								
							foreach ($categories as $category_id) {
								$implode_data[] = "p2c.category_id = '" . (int)$category_id . "'";
							}
										
							$sql .= " AND (" . implode(' OR ', $implode_data) . ")";			
						} else {
							$sql .= " AND p2c.category_id = '" . (int)$data['filter_category_id'] . "'";
						}
					}		
					
					if (!empty($data['filter_manufacturer_id'])) {
						$sql .= " AND p.manufacturer_id = '" . (int)$data['filter_manufacturer_id'] . "'";
					}
					$query = $this->db->query($sql);
					
					return $query->row['stock'];
				}
				
				public function getProductsSeasons () {
					$sql = "SELECT p.upc FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id)";
					
					$sql .= " WHERE p.quantity>0 and pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' GROUP BY p.upc";
					$query = $this->db->query($sql);
					
					return $query->rows;
				}
			]]></add>
		</operation>
		<operation>
			<search position="replace"><![CDATA['weight_prefix'           => $product_option_value['weight_prefix']]]></search>
			<add><![CDATA[
				'weight_prefix'           => $product_option_value['weight_prefix'],
				'ean'           => $product_option_value['EAN']
			]]></add>
		</operation>
	</file>
	
	
	
<!--Login con nombre de usuario-->
<!--===========================================================================-->	
	
	
	<file name="catalog/language/spanish/account/login.php">
        <operation>
            <search position="replace"><![CDATA[$_['entry_email']                  = 'Dirección e-mail:';]]></search>
            <add><![CDATA[$_['entry_email']                  = 'Usuario:';]]></add>
        </operation>
		<operation>
            <search position="replace"><![CDATA[$_['text_i_am_returning_customer'] = 'Ya soy cliente';]]></search>
            <add><![CDATA[$_['text_i_am_returning_customer'] = '';]]></add>
        </operation>
		<operation>
            <search position="replace"><![CDATA[$_['text_returning_customer']      = 'Cliente con cuenta';]]></search>
            <add><![CDATA[$_['text_returning_customer']      = 'Acceso clientes';]]></add>
        </operation>
	</file>
	
	<file name="catalog/language/english/account/login.php">
        <operation>
            <search position="replace"><![CDATA[$_['entry_email']                  = 'E-Mail Address:';]]></search>
            <add><![CDATA[$_['entry_email']                  = 'User:';]]></add>
        </operation>
		<operation>
            <search position="replace"><![CDATA[$_['text_i_am_returning_customer'] = 'I am a returning customer';]]></search>
            <add><![CDATA[$_['text_i_am_returning_customer'] = '';]]></add>
        </operation>
	</file>
	

	<file name="system/library/customer.php">
		<operation>
			<search position="replace"><![CDATA[$customer_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "customer WHERE LOWER(email) = '" . $this->db->escape(strtolower($email)) . "' AND password = '" . $this->db->escape(md5($password)) . "' AND status = '1' AND approved = '1'");]]></search>
			<add><![CDATA[
				$customer_query = $this->db->query("SELECT c.*,s.name,s.url FROM " . DB_PREFIX . "customer c INNER JOIN " . DB_PREFIX . "store s on s.store_id=c.store_id WHERE LOWER(firstname) = '" . $this->db->escape(strtolower($email)) . "' AND password = '" . $this->db->escape(md5($password)) . "' AND status = '1' AND approved = '1'");
			]]></add>
		</operation>
		<operation>
			<search position="after"><![CDATA[$this->session->data['customer_id'] = $customer_query->row['customer_id'];	 ]]></search>
				<add><![CDATA[
					$this->session->data['config_store_id']= $customer_query->row['store_id'];
					$this->session->data['config_store_name']=$customer_query->row['name'];
				]]></add>
		</operation>
	</file>	

	<file name="catalog/view/theme/*/template/account/account.tpl">
        <operation>
            <search position="replace" offset="5"><![CDATA[<h2><?php echo $text_my_newsletter; ?></h2>]]></search>
            <add><![CDATA[]]></add>
        </operation>
	</file>

<!--Eliminar importes-->
<!--===========================================================================-->	
	<file name="catalog/language/english/module/cart.php">
        <operation>
            <search position="replace"><![CDATA[$_['text_items']    = '%s item(s) - %s';]]></search>
            <add><![CDATA[$_['text_items']    = '%s item(s)';]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[$_['text_checkout'] = 'Checkout';]]></search>
            <add><![CDATA[$_['text_checkout'] = 'Close order';]]></add>
        </operation>
		
	</file>
	
	<file name="catalog/language/spanish/module/cart.php">
        <operation>
            <search position="replace"><![CDATA[$_['text_items']    = '%s producto(s) - %s';]]></search>
            <add><![CDATA[$_['text_items']    = '%s producto(s)';]]></add>
        </operation>
        <operation>
            <search position="replace"><![CDATA[$_['text_checkout'] = 'Pagar';]]></search>
            <add><![CDATA[$_['text_checkout'] = 'Finalizar';]]></add>
        </operation>
	</file>
	
		
	<file name="catalog/language/english/english.php">
        <operation>
            <search position="replace"><![CDATA[$_['button_checkout']       = 'Checkout';]]></search>
            <add><![CDATA[$_['button_checkout']       = 'Close order';]]></add>
        </operation>
	</file>

	<file name="catalog/language/spanish/spanish.php">
        <operation>
            <search position="replace"><![CDATA[$_['button_checkout']       = 'Pagar';]]></search>
            <add><![CDATA[$_['button_checkout']       = 'Finalizar';]]></add>
        </operation>
	</file>
	<!--===========================================================================-->	


	<!--Añadimos opción de localizar paises por iso_code_2
	===========================================================================-->
	<file name="catalog/model/localisation/country.php">
		<operation>
			<search position="before"><![CDATA[public function getCountries() {]]></search>
			<add><![CDATA[
				public function getCountryByIsoCode2($iso_code_2) {
						$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "country WHERE iso_code_2 = '" . $iso_code_2 . "' AND status = '1'");
						
						return $query->row;
					}	
			]]></add>
		</operation>
	</file>
	<!--===========================================================================-->	


	<!--Añadimos opción para dar formato mysql a las fechas antes de utilizarlas.
	===========================================================================-->
	<file name="system/library/db.php">
		<operation>
			<search position="replace"><![CDATA[require_once(DIR_DATABASE . $driver . '.php');]]></search>
			<add><![CDATA[
				global $vqmod;
				require_once($vqmod->modCheck(DIR_DATABASE . $driver . '.php'));
			]]></add>
		</operation>
	</file>
	<file name="system/library/db.php">
		<operation>
			<search position="before"><![CDATA[public function escape($value) {]]></search>
			<add><![CDATA[
				public function cambiaf_a_mysql($fecha){
					return $this->driver->cambiaf_a_mysql($fecha);
				}
			]]></add>
		</operation>
	</file>

	<file name="system/database/mysql.php">
		<operation>
			<search position="before"><![CDATA[public function countAffected() {]]></search>
			<add><![CDATA[
				////FUNCIÓN PARA PASAR UNA FECHA NORMAL A FORMATO MYSQL
				 public function cambiaf_a_mysql($fecha){ 
					preg_match('/([0-9]{1,2})[^\.-]([0-9]{1,2})[^\.-]([0-9]{2,4})/', $fecha, $mifecha); 
					$lafecha=$mifecha[3]."-".$mifecha[2]."-".$mifecha[1]; 
					return $lafecha; 
				} 	
			]]></add>
		</operation>
	</file>
	<!--===========================================================================-->	


	<!--Modificamos la librería Mail para poder incluir attachment del tipo inline para poder incluir imágenes en los mails.
	===========================================================================-->
	<file name="system/library/mail.php">
		<operation>
			<search position="repace"><![CDATA[$message .= 'Content-Disposition: attachment; filename="' . basename($attachment) . '"' . $this->newline;]]></search>
			<add><![CDATA[
				$message .= 'Content-Disposition: attachment-inline; filename="' . basename($attachment) . '"' . $this->newline;
			]]></add>
		</operation>
	</file>
	
	<!--Modificamos el botón de "Continuar Comprando" para que vuelva a la página anterior-->
	<file name="catalog/controller/checkout/cart.php">
		<operation>
			<search position="replace"><![CDATA[$this->data['continue'] = $this->url->link('common/home');]]></search>
			<add><![CDATA[$this->data['continue'] = $_SERVER['HTTP_REFERER'];]]></add>
		</operation>
	</file>
			
	
</modification>